 Backend Developer Live Coding Challenges
1. Design a RESTful CRUD API
• Task: Build a RESTful API to manage a collection of resources (e.g., books, users,
products).
• Requirements:
o Implement endpoints for Create, Read, Update, and Delete operations.
o Use appropriate HTTP methods and status codes.
o Integrate with a database (e.g., PostgreSQL, MongoDB).
o Handle error cases gracefully.
• Evaluation Criteria:
o Adherence to REST principles.
o Code organization and modularity.
o Error handling and input validation.
o Use of ORM or database abstraction layers.
2. Implement Authentication and Authorization
• Task: Add user authentication to an existing API.
• Requirements:
o Implement user registration and login functionality.
o Use JWT or session-based authentication.
o Protect certain endpoints to be accessible only by authenticated users.
o Implement role-based access control for specific resources.
• Evaluation Criteria:
o Security best practices (e.g., password hashing, token expiration).
o Proper middleware usage for protecting routes.
o Scalability considerations

 Frontend Developer Live Coding Challenges
1. Build a Dynamic To-Do List
• Task: Create a to-do list application with interactive features.
• Requirements:
o Add, edit, and delete tasks.
o Mark tasks as completed.
o Filter tasks based on status (all, active, completed).
o Persist tasks using local storage.
• Evaluation Criteria:
o State management and component structure.
o User experience and responsiveness.
o Code readability and maintainability.
2. Implement a Searchable Data Table
• Task: Display tabular data with search and sort functionalities.
• Requirements:
o Fetch data from a public API or mock data source.
o Implement client-side search filtering.
o Allow sorting by different columns.
o Paginate results for better usability.
• Evaluation Criteria:
o Efficient rendering of large datasets.
o Accessibility considerations.
o Responsive design implementation.
3. Create a Responsive Dashboard Layout
• Task: Design a dashboard interface with multiple widgets.
• Requirements:
o Implement a responsive grid layout.
o Include various components (e.g., charts, tables, notifications).
o Ensure compatibility across different screen sizes.
o Use a CSS framework or custom styling.
• Evaluation Criteria:
o Visual design and layout consistency.
o Responsiveness and adaptability.
o Code modularity and reuse of components.
